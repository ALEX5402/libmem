from typing import *


lm_address_t = TypeVar('lm_address_t', bound=int)
lm_size_t = TypeVar('lm_size_t', bound=int)
lm_pid_t = TypeVar('lm_pid_t', bound=int)
lm_tid_t = TypeVar('lm_tid_t', bound=int)
lm_prot_t = TypeVar('lm_prot_t', bound=int)
lm_inst_t = TypeVar('lm_inst_t', bound=int)


LM_PATH_MAX = 260
LM_CHARSET_UC = 1
LM_PROT_NONE = 0
LM_PROT_X = (1 << 0)
LM_PROT_R = (1 << 1)
LM_PROT_W = (1 << 2)
LM_PROT_XR = LM_PROT_X | LM_PROT_R
LM_PROT_XW = LM_PROT_X | LM_PROT_W
LM_PROT_RW = LM_PROT_R | LM_PROT_W
LM_PROT_XRW = LM_PROT_X | LM_PROT_R | LM_PROT_W

class lm_module_t:
    base: lm_address_t
    end: lm_address_t
    size: lm_size_t
    path: str
    name: str

class lm_process_t:
    pid: lm_pid_t
    ppid: lm_pid_t
    bits: lm_size_t
    start_time: lm_size_t
    path: str
    name: str
    
class lm_page_t:
    base: lm_address_t
    end: lm_address_t
    size: lm_size_t
    prot: lm_prot_t

class lm_thread_t:
    tid: lm_tid_t
    
class lm_symbol_t:
    addr: lm_address_t
    name: str
    
def LM_AllocMemory(size : int, prot : int) -> lm_address_t: ...
def LM_AllocMemoryEx(pproc : lm_process_t, size : int, prot : int) -> lm_address_t: ...
def LM_Assemble(code : str) -> lm_inst_t: ...
def LM_AssembleEx(code : str, bits : int, runtime_addr : int) -> bytearray: ...
def LM_CodeLength(code : int, minlength : int) -> int: ...
def LM_CodeLengthEx(pproc : lm_process_t, code : int, minlength : int) -> int: ...
def LM_DataScan(data : bytearray, addr : int, scansize : int) -> lm_address_t: ...
def LM_DataScanEx(pproc : lm_process_t, data : bytearray, addr : int, scansize : int) -> lm_address_t: ...
def LM_DemangleSymbol(symbol : str) -> str: ...
def LM_Disassemble(code : int) -> lm_inst_t: ...
def LM_DisassembleEx(code : int, bits : int, size : int, count : int, runtime_addr : int) -> List[lm_inst_t]: ...
def LM_EnumModules() -> List[lm_module_t]: ...
def LM_EnumModulesEx(pproc : lm_process_t) -> List[lm_module_t]: ...
def LM_EnumPages() -> List[lm_page_t]: ...
def LM_EnumProcesses() -> List[lm_process_t]: ...
def LM_EnumSymbols(pmod : lm_module_t) -> List[lm_symbol_t]: ...
def LM_EnumSymbolsDemangled(pmod : lm_module_t) -> List[lm_symbol_t]: ...
def LM_EnumThreads() -> List[lm_thread_t]: ...
def LM_EnumThreadsEx(pproc : lm_process_t) -> List[lm_thread_t]: ...
def LM_FindModule(name : str) -> lm_module_t: ...
def LM_FindModuleEx(pproc : lm_process_t, name : str) -> lm_module_t: ...
def LM_FindProcess(procstr : str) -> lm_process_t: ...
def LM_FindSymbolAddress(pmod : lm_module_t, name : str) -> int: ...
def LM_FindSymbolAddressDemangled(pmod : lm_module_t, name : str) -> int: ...
def LM_FreeMemory(alloc : int, size : int) -> bool: ...
def LM_FreeMemoryEx(pproc : lm_process_t, alloc : int, size : int) -> bool: ...
def LM_GetPage(addr : int) -> lm_page_t: ...
def LM_GetPageEx(pproc : lm_process_t, addr : int) -> lm_page_t: ...
def LM_GetProcess() -> lm_process_t: ...
def LM_GetProcessEx(pid : lm_pid_t) -> lm_process_t: ...
def LM_GetThread() -> lm_thread_t: ...
def LM_GetThreadEx(pproc : lm_process_t) -> lm_thread_t: ...
def LM_GetThreadProcess(pthr : lm_thread_t) -> lm_process_t: ...
def LM_HookCode(from: lm_address_t, to : lm_address_t) -> lm_address_t: ...
def LM_HookCodeEx(pproc : lm_process_t, from: lm_address_t, to : lm_address_t) -> lm_address_t: ...
def LM_IsProcessAlive(pproc : lm_process_t) -> bool: ...
def LM_LoadModule(modpath : str) -> lm_module_t: ...
def LM_LoadModuleEx(pproc : lm_process_t, modpath : str) -> lm_module_t: ...
def LM_PatternScan(pattern : bytearray, mask : str, addr : lm_address_t, scansize : int) -> lm_address_t: ...
def LM_PatternScanEx(pproc : lm_process_t, pattern : bytearray, mask : str, addr : lm_address_t, scansize : int) -> lm_address_t: ...
def LM_ProtMemory(addr : int, size : int, prot : lm_prot_t) -> lm_prot_t: ...
def LM_ProtMemoryEx(pproc : lm_process_t, addr : lm_address_t, size : int, prot : lm_prot_t) -> lm_prot_t: ...
def LM_ReadMemory(src : lm_address_t, size : int) -> bytearray: ...
def LM_ReadMemoryEx(pproc : lm_process_t, src : lm_address_t, size : int) -> bytearray: ...
def LM_SetMemory(dst : lm_address_t, byte : bytes, size : int) -> bool: ...
def LM_SetMemoryEx(pproc : lm_process_t, dst : lm_address_t, byte : bytes, size : int) -> bool: ...
def LM_SigScan(sig : str, addr : lm_address_t, scansize : int) -> lm_address_t: ...
def LM_SigScanEx(pproc : lm_process_t, sig : str, addr : lm_address_t, scansize : int) -> lm_address_t: ...
def LM_UnhookCode(from: lm_address_t, trampoline : (lm_address_t, int)) -> bool: ...
def LM_UnhookCodeEx(pproc : lm_process_t, from: lm_address_t, trampoline : (int, int)) -> bool: ...
def LM_UnloadModule(pmod : lm_module_t) -> bool: ...
def LM_UnloadModuleEx(pproc : lm_process_t, pmod : lm_module_t) -> bool: ...
def LM_WriteMemory(dst : int, src : bytearray) -> bool: ...
def LM_WriteMemoryEx(pproc : lm_process_t, dst : int, src : bytearray) -> bool: ...
